/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ContractManager,
  ContractManagerInterface,
} from "../../../contracts/ContractManager.sol/ContractManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
    ],
    name: "RequestFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "RequestCompelted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "bytes4",
            name: "functionId",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "userWallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "value",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct ContractManagerAccess.accessStruct",
        name: "_access",
        type: "tuple",
      },
    ],
    name: "accessUpdatedEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "mode",
        type: "bool",
      },
    ],
    name: "adminEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytesData",
        type: "bytes",
      },
    ],
    name: "batchCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getAdminAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "getAdminContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdminsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContracts",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFunctions",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUsers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_functionId",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "_userWallet",
        type: "address",
      },
    ],
    name: "hasAccess",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_mode",
        type: "bool",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "bytes4",
            name: "functionId",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "userWallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "value",
            type: "bool",
          },
        ],
        internalType: "struct ContractManagerAccess.accessStruct[]",
        name: "_newAccess",
        type: "tuple[]",
      },
    ],
    name: "updateAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611be48061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80635e848f3a1161008c57806395648f1b1161006657806395648f1b146101ff578063c3a2a93a1461021d578063f2fde38b1461023b578063fc6837a114610257576100ce565b80635e848f3a146101bb578063715018a6146101d75780638da5cb5b146101e1576100ce565b8062ce8e3e146100d357806327369718146100f15780633341693c1461012157806337267bc3146101515780634138624a1461016f5780634b0bddd21461019f575b600080fd5b6100db610273565b6040516100e89190611118565b60405180910390f35b61010b6004803603810190610106919061117a565b610284565b60405161011891906111c2565b60405180910390f35b61013b60048036038101906101369190611235565b6102a1565b60405161014891906111c2565b60405180910390f35b610159610404565b60405161016691906112a1565b60405180910390f35b610189600480360381019061018491906112e8565b610415565b6040516101969190611324565b60405180910390f35b6101b960048036038101906101b4919061136b565b610432565b005b6101d560048036038101906101d09190611410565b6104ad565b005b6101df610935565b005b6101e9610949565b6040516101f69190611324565b60405180910390f35b610207610972565b6040516102149190611525565b60405180910390f35b610225610983565b6040516102329190611118565b60405180910390f35b6102556004803603810190610250919061117a565b610994565b005b610271600480360381019061026c9190611688565b610a17565b005b606061027f6005610b65565b905090565b600061029a826001610b8690919063ffffffff16565b9050919050565b600063f2fde38b60e01b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102fc575063715018a660e01b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561030a57600090506103fd565b610312610949565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361034d57600190506103fd565b6103fa837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610bb690919063ffffffff16565b90505b9392505050565b60006104106001610bcd565b905090565b600061042b826001610be290919063ffffffff16565b9050919050565b61043a610bfc565b801561045a57610454826001610c7a90919063ffffffff16565b50610470565b61046e826001610caa90919063ffffffff16565b505b7f6bee1852ac1880c9a13b899eee6eeb36023bb3b07c24dee47daff561c65a85ef82826040516104a19291906116d1565b60405180910390a15050565b6104b5610949565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104f357506104f233610284565b5b610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990611757565b60405180910390fd5b60005b828290508160ff1610156109305782828260ff1681811061055957610558611777565b5b905060800201606001602081019061057191906117a6565b15610795576105b783838360ff1681811061058f5761058e611777565b5b90506080020160000160208101906105a7919061117a565b6003610c7a90919063ffffffff16565b506105f983838360ff168181106105d1576105d0611777565b5b90506080020160400160208101906105e9919061117a565b6005610c7a90919063ffffffff16565b5061065a83838360ff1681811061061357610612611777565b5b905060800201602001602081019061062b91906117d3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166007610cda90919063ffffffff16565b5061078f83838360ff1681811061067457610673611777565b5b905060800201602001602081019061068c91906117d3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166009600086868660ff168181106106c5576106c4611777565b5b90506080020160000160208101906106dd919061117a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868660ff1681811061072f5761072e611777565b5b9050608002016040016020810190610747919061117a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610cda90919063ffffffff16565b506108cb565b6108c983838360ff168181106107ae576107ad611777565b5b90506080020160200160208101906107c691906117d3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166009600086868660ff168181106107ff576107fe611777565b5b9050608002016000016020810190610817919061117a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868660ff1681811061086957610868611777565b5b9050608002016040016020810190610881919061117a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610cf190919063ffffffff16565b505b7f991989dc2dea5933f06c7bbc85252ed30a279fc6a82e6259a9c52aedbbe0de8f83838360ff1681811061090257610901611777565b5b90506080020160405161091591906118d8565b60405180910390a180806109289061192f565b915050610535565b505050565b61093d610bfc565b6109476000610d08565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606061097e6007610dcc565b905090565b606061098f6003610b65565b905090565b61099c610bfc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a02906119ca565b60405180910390fd5b610a1481610d08565b50565b600080602083019050805160f01c91506002810190505960405260005b8261ffff168160ff161015610b5f576000806000845160f01c92506002850194508451915060208501945084519050610a6e8282336102a1565b610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611757565b60405180910390fd5b600060405160008186896000885af1915084870196505080610b0657846040517f7a2da17d000000000000000000000000000000000000000000000000000000008152600401610afd9190611a33565b60405180910390fd5b87604051610b149190611ac8565b60405180910390207f957ca92aff3a71c8f449700d17d33d67e1587539864b289480233a9b2b79645f60405160405180910390a2505050508080610b579061192f565b915050610a34565b50505050565b60606000610b7583600001610de1565b905060608190508092505050919050565b6000610bae836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610e3d565b905092915050565b6000610bc58360000183610e3d565b905092915050565b6000610bdb82600001610e60565b9050919050565b6000610bf18360000183610e71565b60001c905092915050565b610c04610e9c565b73ffffffffffffffffffffffffffffffffffffffff16610c22610949565b73ffffffffffffffffffffffffffffffffffffffff1614610c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6f90611b2b565b60405180910390fd5b565b6000610ca2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610ea4565b905092915050565b6000610cd2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610f14565b905092915050565b6000610ce98360000183610ea4565b905092915050565b6000610d008360000183610f14565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610dda82600001610de1565b9050919050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610e3157602002820191906000526020600020905b815481526020019060010190808311610e1d575b50505050509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000826000018281548110610e8957610e88611777565b5b9060005260206000200154905092915050565b600033905090565b6000610eb08383610e3d565b610f09578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610f0e565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461101c576000600182610f469190611b4b565b9050600060018660000180549050610f5e9190611b4b565b9050818114610fcd576000866000018281548110610f7f57610f7e611777565b5b9060005260206000200154905080876000018481548110610fa357610fa2611777565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480610fe157610fe0611b7f565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611022565b60009150505b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107f82611054565b9050919050565b61108f81611074565b82525050565b60006110a18383611086565b60208301905092915050565b6000602082019050919050565b60006110c582611028565b6110cf8185611033565b93506110da83611044565b8060005b8381101561110b5781516110f28882611095565b97506110fd836110ad565b9250506001810190506110de565b5085935050505092915050565b6000602082019050818103600083015261113281846110ba565b905092915050565b6000604051905090565b600080fd5b600080fd5b61115781611074565b811461116257600080fd5b50565b6000813590506111748161114e565b92915050565b6000602082840312156111905761118f611144565b5b600061119e84828501611165565b91505092915050565b60008115159050919050565b6111bc816111a7565b82525050565b60006020820190506111d760008301846111b3565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611212816111dd565b811461121d57600080fd5b50565b60008135905061122f81611209565b92915050565b60008060006060848603121561124e5761124d611144565b5b600061125c86828701611165565b935050602061126d86828701611220565b925050604061127e86828701611165565b9150509250925092565b6000819050919050565b61129b81611288565b82525050565b60006020820190506112b66000830184611292565b92915050565b6112c581611288565b81146112d057600080fd5b50565b6000813590506112e2816112bc565b92915050565b6000602082840312156112fe576112fd611144565b5b600061130c848285016112d3565b91505092915050565b61131e81611074565b82525050565b60006020820190506113396000830184611315565b92915050565b611348816111a7565b811461135357600080fd5b50565b6000813590506113658161133f565b92915050565b6000806040838503121561138257611381611144565b5b600061139085828601611165565b92505060206113a185828601611356565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126113d0576113cf6113ab565b5b8235905067ffffffffffffffff8111156113ed576113ec6113b0565b5b602083019150836080820283011115611409576114086113b5565b5b9250929050565b6000806020838503121561142757611426611144565b5b600083013567ffffffffffffffff81111561144557611444611149565b5b611451858286016113ba565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61149c81611489565b82525050565b60006114ae8383611493565b60208301905092915050565b6000602082019050919050565b60006114d28261145d565b6114dc8185611468565b93506114e783611479565b8060005b838110156115185781516114ff88826114a2565b975061150a836114ba565b9250506001810190506114eb565b5085935050505092915050565b6000602082019050818103600083015261153f81846114c7565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115958261154c565b810181811067ffffffffffffffff821117156115b4576115b361155d565b5b80604052505050565b60006115c761113a565b90506115d3828261158c565b919050565b600067ffffffffffffffff8211156115f3576115f261155d565b5b6115fc8261154c565b9050602081019050919050565b82818337600083830152505050565b600061162b611626846115d8565b6115bd565b90508281526020810184848401111561164757611646611547565b5b611652848285611609565b509392505050565b600082601f83011261166f5761166e6113ab565b5b813561167f848260208601611618565b91505092915050565b60006020828403121561169e5761169d611144565b5b600082013567ffffffffffffffff8111156116bc576116bb611149565b5b6116c88482850161165a565b91505092915050565b60006040820190506116e66000830185611315565b6116f360208301846111b3565b9392505050565b600082825260208201905092915050565b7f4e6f7420417574686f7269736564000000000000000000000000000000000000600082015250565b6000611741600e836116fa565b915061174c8261170b565b602082019050919050565b6000602082019050818103600083015261177081611734565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117bc576117bb611144565b5b60006117ca84828501611356565b91505092915050565b6000602082840312156117e9576117e8611144565b5b60006117f784828501611220565b91505092915050565b600061180f6020840184611165565b905092915050565b60006118266020840184611220565b905092915050565b611837816111dd565b82525050565b600061184c6020840184611356565b905092915050565b61185d816111a7565b82525050565b608082016118746000830183611800565b6118816000850182611086565b5061188f6020830183611817565b61189c602085018261182e565b506118aa6040830183611800565b6118b76040850182611086565b506118c5606083018361183d565b6118d26060850182611854565b50505050565b60006080820190506118ed6000830184611863565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061193a82611922565b915060ff820361194d5761194c6118f3565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006119b46026836116fa565b91506119bf82611958565b604082019050919050565b600060208201905081810360008301526119e3816119a7565b9050919050565b600061ffff82169050919050565b6000819050919050565b6000611a1d611a18611a1384611922565b6119f8565b6119ea565b9050919050565b611a2d81611a02565b82525050565b6000602082019050611a486000830184611a24565b92915050565b600081519050919050565b600081905092915050565b60005b83811015611a82578082015181840152602081019050611a67565b83811115611a91576000848401525b50505050565b6000611aa282611a4e565b611aac8185611a59565b9350611abc818560208601611a64565b80840191505092915050565b6000611ad48284611a97565b915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b156020836116fa565b9150611b2082611adf565b602082019050919050565b60006020820190508181036000830152611b4481611b08565b9050919050565b6000611b5682611288565b9150611b6183611288565b925082821015611b7457611b736118f3565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220485a6381f41cda4861ec05df7c6dfdd133ba89b9f28c739617d15089acb8385464736f6c634300080d0033";

type ContractManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractManager__factory extends ContractFactory {
  constructor(...args: ContractManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractManager> {
    return super.deploy(overrides || {}) as Promise<ContractManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractManager {
    return super.attach(address) as ContractManager;
  }
  override connect(signer: Signer): ContractManager__factory {
    return super.connect(signer) as ContractManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractManagerInterface {
    return new utils.Interface(_abi) as ContractManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractManager {
    return new Contract(address, _abi, signerOrProvider) as ContractManager;
  }
}

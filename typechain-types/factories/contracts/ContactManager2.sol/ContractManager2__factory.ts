/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ContractManager2,
  ContractManager2Interface,
} from "../../../contracts/ContactManager2.sol/ContractManager2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "bytes4",
            name: "functionId",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "userWallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "value",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct ContractManager2.accessStruct",
        name: "_access",
        type: "tuple",
      },
    ],
    name: "accessUpdatedEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "mode",
        type: "bool",
      },
    ],
    name: "adminEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getAdminAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "getAdminContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdminsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContracts",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFunctions",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUsers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_functionId",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "_userWallet",
        type: "address",
      },
    ],
    name: "hasAccess",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_mode",
        type: "bool",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "bytes4",
            name: "functionId",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "userWallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "value",
            type: "bool",
          },
        ],
        internalType: "struct ContractManager2.accessStruct[]",
        name: "_newAccess",
        type: "tuple[]",
      },
    ],
    name: "updateAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6117938061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c80635e848f3a116100715780635e848f3a146101a0578063715018a6146101bc5780638da5cb5b146101c657806395648f1b146101e4578063c3a2a93a14610202578063f2fde38b14610220576100b3565b8062ce8e3e146100b857806327369718146100d65780633341693c1461010657806337267bc3146101365780634138624a146101545780634b0bddd214610184575b600080fd5b6100c061023c565b6040516100cd9190610f50565b60405180910390f35b6100f060048036038101906100eb9190610fa8565b61024d565b6040516100fd9190610ff0565b60405180910390f35b610120600480360381019061011b9190611063565b61026a565b60405161012d9190610ff0565b60405180910390f35b61013e61038a565b60405161014b91906110cf565b60405180910390f35b61016e60048036038101906101699190611116565b61039b565b60405161017b9190611152565b60405180910390f35b61019e60048036038101906101999190611199565b6103b8565b005b6101ba60048036038101906101b5919061123e565b610433565b005b6101c46108bb565b005b6101ce6108cf565b6040516101db9190611152565b60405180910390f35b6101ec6108f8565b6040516101f99190611353565b60405180910390f35b61020a610909565b6040516102179190610f50565b60405180910390f35b61023a60048036038101906102359190610fa8565b61091a565b005b6060610248600561099d565b905090565b60006102638260016109be90919063ffffffff16565b9050919050565b600063f2fde38b60e01b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102c5575063715018a660e01b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156102d35760009050610383565b610380837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206109ee90919063ffffffff16565b90505b9392505050565b60006103966001610a05565b905090565b60006103b1826001610a1a90919063ffffffff16565b9050919050565b6103c0610a34565b80156103e0576103da826001610ab290919063ffffffff16565b506103f6565b6103f4826001610ae290919063ffffffff16565b505b7f6bee1852ac1880c9a13b899eee6eeb36023bb3b07c24dee47daff561c65a85ef8282604051610427929190611375565b60405180910390a15050565b61043b6108cf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061047957506104783361024d565b5b6104b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104af906113fb565b60405180910390fd5b60005b828290508160ff1610156108b65782828260ff168181106104df576104de61141b565b5b90506080020160600160208101906104f7919061144a565b1561071b5761053d83838360ff168181106105155761051461141b565b5b905060800201600001602081019061052d9190610fa8565b6003610ab290919063ffffffff16565b5061057f83838360ff168181106105575761055661141b565b5b905060800201604001602081019061056f9190610fa8565b6005610ab290919063ffffffff16565b506105e083838360ff168181106105995761059861141b565b5b90506080020160200160208101906105b19190611477565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166007610b1290919063ffffffff16565b5061071583838360ff168181106105fa576105f961141b565b5b90506080020160200160208101906106129190611477565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166009600086868660ff1681811061064b5761064a61141b565b5b90506080020160000160208101906106639190610fa8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868660ff168181106106b5576106b461141b565b5b90506080020160400160208101906106cd9190610fa8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610b1290919063ffffffff16565b50610851565b61084f83838360ff168181106107345761073361141b565b5b905060800201602001602081019061074c9190611477565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166009600086868660ff168181106107855761078461141b565b5b905060800201600001602081019061079d9190610fa8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868660ff168181106107ef576107ee61141b565b5b90506080020160400160208101906108079190610fa8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610b2990919063ffffffff16565b505b7f991989dc2dea5933f06c7bbc85252ed30a279fc6a82e6259a9c52aedbbe0de8f83838360ff168181106108885761088761141b565b5b90506080020160405161089b919061157c565b60405180910390a180806108ae906115d3565b9150506104bb565b505050565b6108c3610a34565b6108cd6000610b40565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606109046007610c04565b905090565b6060610915600361099d565b905090565b610922610a34565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610991576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109889061166e565b60405180910390fd5b61099a81610b40565b50565b606060006109ad83600001610c19565b905060608190508092505050919050565b60006109e6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610c75565b905092915050565b60006109fd8360000183610c75565b905092915050565b6000610a1382600001610c98565b9050919050565b6000610a298360000183610ca9565b60001c905092915050565b610a3c610cd4565b73ffffffffffffffffffffffffffffffffffffffff16610a5a6108cf565b73ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa7906116da565b60405180910390fd5b565b6000610ada836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610cdc565b905092915050565b6000610b0a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610d4c565b905092915050565b6000610b218360000183610cdc565b905092915050565b6000610b388360000183610d4c565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610c1282600001610c19565b9050919050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610c6957602002820191906000526020600020905b815481526020019060010190808311610c55575b50505050509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000826000018281548110610cc157610cc061141b565b5b9060005260206000200154905092915050565b600033905090565b6000610ce88383610c75565b610d41578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610d46565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114610e54576000600182610d7e91906116fa565b9050600060018660000180549050610d9691906116fa565b9050818114610e05576000866000018281548110610db757610db661141b565b5b9060005260206000200154905080876000018481548110610ddb57610dda61141b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480610e1957610e1861172e565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e5a565b60009150505b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eb782610e8c565b9050919050565b610ec781610eac565b82525050565b6000610ed98383610ebe565b60208301905092915050565b6000602082019050919050565b6000610efd82610e60565b610f078185610e6b565b9350610f1283610e7c565b8060005b83811015610f43578151610f2a8882610ecd565b9750610f3583610ee5565b925050600181019050610f16565b5085935050505092915050565b60006020820190508181036000830152610f6a8184610ef2565b905092915050565b600080fd5b600080fd5b610f8581610eac565b8114610f9057600080fd5b50565b600081359050610fa281610f7c565b92915050565b600060208284031215610fbe57610fbd610f72565b5b6000610fcc84828501610f93565b91505092915050565b60008115159050919050565b610fea81610fd5565b82525050565b60006020820190506110056000830184610fe1565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6110408161100b565b811461104b57600080fd5b50565b60008135905061105d81611037565b92915050565b60008060006060848603121561107c5761107b610f72565b5b600061108a86828701610f93565b935050602061109b8682870161104e565b92505060406110ac86828701610f93565b9150509250925092565b6000819050919050565b6110c9816110b6565b82525050565b60006020820190506110e460008301846110c0565b92915050565b6110f3816110b6565b81146110fe57600080fd5b50565b600081359050611110816110ea565b92915050565b60006020828403121561112c5761112b610f72565b5b600061113a84828501611101565b91505092915050565b61114c81610eac565b82525050565b60006020820190506111676000830184611143565b92915050565b61117681610fd5565b811461118157600080fd5b50565b6000813590506111938161116d565b92915050565b600080604083850312156111b0576111af610f72565b5b60006111be85828601610f93565b92505060206111cf85828601611184565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111fe576111fd6111d9565b5b8235905067ffffffffffffffff81111561121b5761121a6111de565b5b602083019150836080820283011115611237576112366111e3565b5b9250929050565b6000806020838503121561125557611254610f72565b5b600083013567ffffffffffffffff81111561127357611272610f77565b5b61127f858286016111e8565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6112ca816112b7565b82525050565b60006112dc83836112c1565b60208301905092915050565b6000602082019050919050565b60006113008261128b565b61130a8185611296565b9350611315836112a7565b8060005b8381101561134657815161132d88826112d0565b9750611338836112e8565b925050600181019050611319565b5085935050505092915050565b6000602082019050818103600083015261136d81846112f5565b905092915050565b600060408201905061138a6000830185611143565b6113976020830184610fe1565b9392505050565b600082825260208201905092915050565b7f4e6f7420417574686f7269736564000000000000000000000000000000000000600082015250565b60006113e5600e8361139e565b91506113f0826113af565b602082019050919050565b60006020820190508181036000830152611414816113d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156114605761145f610f72565b5b600061146e84828501611184565b91505092915050565b60006020828403121561148d5761148c610f72565b5b600061149b8482850161104e565b91505092915050565b60006114b36020840184610f93565b905092915050565b60006114ca602084018461104e565b905092915050565b6114db8161100b565b82525050565b60006114f06020840184611184565b905092915050565b61150181610fd5565b82525050565b6080820161151860008301836114a4565b6115256000850182610ebe565b5061153360208301836114bb565b61154060208501826114d2565b5061154e60408301836114a4565b61155b6040850182610ebe565b5061156960608301836114e1565b61157660608501826114f8565b50505050565b60006080820190506115916000830184611507565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b60006115de826115c6565b915060ff82036115f1576115f0611597565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061165860268361139e565b9150611663826115fc565b604082019050919050565b600060208201905081810360008301526116878161164b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116c460208361139e565b91506116cf8261168e565b602082019050919050565b600060208201905081810360008301526116f3816116b7565b9050919050565b6000611705826110b6565b9150611710836110b6565b92508282101561172357611722611597565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220f28ad2f3f1e867daf04646e9c812d97cf26334ea8bb08bc4558b9e1319193f2064736f6c634300080d0033";

type ContractManager2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractManager2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractManager2__factory extends ContractFactory {
  constructor(...args: ContractManager2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractManager2> {
    return super.deploy(overrides || {}) as Promise<ContractManager2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractManager2 {
    return super.attach(address) as ContractManager2;
  }
  override connect(signer: Signer): ContractManager2__factory {
    return super.connect(signer) as ContractManager2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractManager2Interface {
    return new utils.Interface(_abi) as ContractManager2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractManager2 {
    return new Contract(address, _abi, signerOrProvider) as ContractManager2;
  }
}
